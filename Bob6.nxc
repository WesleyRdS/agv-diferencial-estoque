#define WALL 25
#define BLACK 50
#define SILVER 77
#define REDMAX 63
#define REDMIN 60
#define OBJECT 23
#define LeftEngine OUT_B
#define RightEngine OUT_C


string state  = "Recharge";
bool Getted = false;
int localCounter = 0;
float Vx_d = 30;
float Vx_e = 33.25;
mutex motor_control;

void localMS()
{
	switch(localCounter)
    {
	    case 0:
		state = "Recharge";
		break;
	    case 1:
		state = "Stock";
		break;
	    case 2:
		state = "Warehouse";
		break;
	    case 3:
		state = "ExitWarehouse";
		break;
	    case 4:
		state = "Housing";
		break;
	    case 5:
		state = "Download";
		break;
	    case 6:
		state = "ExitHousing";
		break;
	    case 7:
		state = "SearchBase";
		break;
	    case 8:
		state = "SearchRecharge";
		break;

	}
}

void DifferentialDriveKinematic(){
	long tf;

	tf = CurrentTick() + 1800;
	while(CurrentTick() < tf);
	tf = 0;
}
void pivoting(){
	//Curva
	Acquire(motor_control);
	OnRev(LeftEngine, Vx_e);
        OnRev(RightEngine, Vx_d);
	DifferentialDriveKinematic();
        Off(OUT_BC);
	Release(motor_control);

	Acquire(motor_control);
	OnRev(RightEngine, Vx_d);
	OnFwd(LeftEngine, Vx_e);
	DifferentialDriveKinematic();
        Off(OUT_BC);
	Release(motor_control);

	Acquire(motor_control);
	OnFwd(LeftEngine, Vx_e);
    	OnFwd(RightEngine, Vx_d);
	DifferentialDriveKinematic();
	Off(OUT_BC);
	
	
	OnRev(LeftEngine, Vx_e);
	OnFwd(RightEngine, Vx_d);
	DifferentialDriveKinematic();
        Off(OUT_BC);
	Release(motor_control);
}

task to_foward_avoid()
{
    while(true)
    {
    	if(state == "Housing")
    	{
    		if((SensorUS(IN_4) < WALL ||  SensorValue(IN_1) == 1))
        	{

			Acquire(motor_control);
			OnRev(RightEngine, Vx_d);
			OnFwd(LeftEngine, Vx_e);
			DifferentialDriveKinematic();
			Off(OUT_BC);
			Release(motor_control);
			
			Acquire(motor_control);
			OnFwd(LeftEngine, Vx_e);
			OnFwd(RightEngine, Vx_d);
			DifferentialDriveKinematic();
			Off(OUT_BC);
			Release(motor_control);
			
			Acquire(motor_control);
			OnRev(RightEngine, Vx_d);
			OnFwd(LeftEngine, Vx_e);
			DifferentialDriveKinematic();
			Off(OUT_BC);
			Release(motor_control);

            
        	}
    	}
    	else{
    		if((SensorUS(IN_4) < WALL &&  SensorValue(IN_1) == 1))
        	{
		    	Acquire(motor_control);
			OnRev(LeftEngine, Vx_e);
			OnRev(RightEngine, Vx_d);
			DifferentialDriveKinematic();
			Off(OUT_BC);
			Release(motor_control);

			Acquire(motor_control);
			OnRev(RightEngine, Vx_d);
			OnFwd(LeftEngine, Vx_e);
			DifferentialDriveKinematic();
			Off(OUT_BC);
			Release(motor_control);
            
        	}
    	}
        
    }
}

task line_detector()
{
    while(true)
    {
        if(SensorValue(IN_3) < BLACK)
        {
            if(state == "Stock" || state == "Recharge" || state == "Warehouse" || state == "ExitWarehouse" || state == "Housing")
            {
                 pivoting();
            }
            if(state == "SearchBase" || state == "SearchRecharge")
            {
            	Acquire(motor_control);
		OnRev(LeftEngine, Vx_e);
		OnRev(RightEngine, Vx_d);
		DifferentialDriveKinematic();
		Off(OUT_BC);
		Release(motor_control);

		Acquire(motor_control);
		OnRev(RightEngine, Vx_d);
		OnFwd(LeftEngine, Vx_e);
		DifferentialDriveKinematic();
		Off(OUT_BC);
		Release(motor_control);
            }
            if(state == "ExitHousing")
            {
            	Acquire(motor_control);
		OnRev(LeftEngine, Vx_e);
		OnRev(RightEngine, Vx_d);
		DifferentialDriveKinematic();
		Off(OUT_BC);
		Release(motor_control);

		Acquire(motor_control);
		OnRev(RightEngine, Vx_d);
		OnFwd(LeftEngine, Vx_e);
		DifferentialDriveKinematic();
		DifferentialDriveKinematic();
		Off(OUT_BC);
		Release(motor_control);
            }
            if(state == "Download")
            {
                if(SensorValue(IN_3) > REDMIN && SensorValue(IN_3) < REDMAX)
                {
                	Acquire(motor_control);
			OnRev(LeftEngine, Vx_e);
			OnRev(RightEngine, Vx_d);
			DifferentialDriveKinematic();
			Off(OUT_BC);
			Release(motor_control);

			Acquire(motor_control);
			OnRev(RightEngine, Vx_d);
			OnFwd(LeftEngine, Vx_e);
			DifferentialDriveKinematic();
			DifferentialDriveKinematic();
			Off(OUT_BC);
			Release(motor_control);
                }
            }

        }
        if(SensorValue(IN_3) >= SILVER)
        {
        	Wait(400);
		localCounter = localCounter + 1;
		if(localCounter > 8)
		{
			localCounter = 0;
	    	}
	    	localMS();
	}
	Acquire(motor_control);
        OnFwd(LeftEngine, Vx_e);
        OnFwd(RightEngine, Vx_d);
    	Release(motor_control); 
    }
}

task clawn()
{
    while(true)
    {
        if(state == "Warehouse")
        {
            if(SensorUS(IN_4) <= OBJECT && Getted == false && SensorValue(IN_1) == 0)
            {
		Wait(500);
		Acquire(motor_control);
		OnRev(RightEngine, Vx_d);
		OnFwd(LeftEngine, Vx_e);
		DifferentialDriveKinematic();
		Off(OUT_BC);
		Release(motor_control);
		Acquire(motor_control);
		OnRev(RightEngine, Vx_d);
		OnFwd(LeftEngine, Vx_e);
		DifferentialDriveKinematic();
		DifferentialDriveKinematic();
		Off(OUT_BC);
		Release(motor_control);
		RotateMotor(OUT_A, 50, 45);
		Acquire(motor_control);
		OnRev(LeftEngine, Vx_e);
		OnRev(RightEngine, Vx_d);
		DifferentialDriveKinematic();
		Release(motor_control);
		Acquire(motor_control);
		Off(OUT_BC);
		RotateMotor(OUT_A, 50, -45);
		Getted = true;
		localCounter = localCounter + 1;
		if(localCounter > 8)
		{
			localCounter = 0;
	    	}
	    	localMS();
		Off(OUT_BC);
		Wait(500);
		Release(motor_control);
		Acquire(motor_control);
		OnFwd(RightEngine, Vx_d);
		OnRev(LeftEngine, Vx_e);
		DifferentialDriveKinematic();
		DifferentialDriveKinematic();
		Off(OUT_BC);
		Release(motor_control);
            }
        }
        if(state == "Download" && Getted == true)
        {
            Wait(500);
            Acquire(motor_control);
		OnRev(RightEngine, Vx_d);
		OnFwd(LeftEngine, Vx_e);
		DifferentialDriveKinematic();
		DifferentialDriveKinematic();
		Off(OUT_BC);
		Release(motor_control);
		RotateMotor(OUT_A, 50, 45);
		Acquire(motor_control);
		OnFwd(LeftEngine, Vx_e);
		OnFwd(RightEngine, Vx_d);
		DifferentialDriveKinematic();
		Off(OUT_BC);
		Release(motor_control);
		RotateMotor(OUT_A, 50, -45);
		Acquire(motor_control);
		OnFwd(RightEngine, Vx_d);
		OnRev(LeftEngine, Vx_e);
		DifferentialDriveKinematic();
		DifferentialDriveKinematic();
		Off(OUT_BC);
		Release(motor_control);
        }
    }
}

task main()
{
    SetSensorLight(IN_3);
	SetSensorUltrasonic(IN_4);
	SetSensorTouch(IN_1);
	SetSensorTouch(IN_2);

	Precedes(line_detector,to_foward_avoid,clawn);
}


