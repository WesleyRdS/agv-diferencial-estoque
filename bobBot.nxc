//Definições de Ambiente
#define WALL 25
#define BLACK 50
#define SILVER 80
#define REDMAX 69
#define REDMIN 65
#define OBJECT 25


//Definições do robo
#define BOB_DIAMETER 17.0
#define WHELL_RADIUS 2.8
#define PULSE_PER_REVOLUTION 360
#define CIRCUMFERENCE 17.59291884
#define PIVOT_RADIUS 3.541666667


mutex mc;
bool Getted = false;
bool Rotate = false;
int localCounter = 0;
float MotorB;
float MotorC;
string state  = "Recharge";
float dt;
float dot_omega;

void localMS(){
	switch(localCounter){
	    case 0:
		state = "Recharge";
		break;
	    case 1:
		state = "Stock";
		break;
	    case 2:
		state = "Warehouse";
		break;
	    case 3:
		state = "ExitWarehouse";
		break;
	    case 4:
		state = "Housing";
		break;
	    case 5:
		state = "Download";
		break;
	    case 6:
		state = "ExitHousing";
		break;
	    case 7:
		state = "SearchBase";
		break;
	    case 8:
		state = "SearchRecharge";
		break;
	    
	}
}

void CalculateMotorSpeeds(float dt){
	float rotationB = MotorRotationCount(OUT_B);
	float rotationC = MotorRotationCount(OUT_C);

	float leftSpeed = (rotationC * CIRCUMFERENCE)/dt;
	float rightSpeed = (rotationB * CIRCUMFERENCE)/dt;

	float dot_omega = (leftSpeed + rightSpeed)/(2*PIVOT_RADIUS);
	MotorB = abs(rightSpeed);
	MotorC = abs(leftSpeed);
}

void DifferentialDriveKinematic(float angle){
	
	float arcLenght = PIVOT_RADIUS * ((angle * PI)/180);
	float rotations = arcLenght / (2 * PI * WHELL_RADIUS);
	int motorPulses = rotations * PULSE_PER_REVOLUTION;

	float speed = (MotorB + MotorC)/2;
	float time = (motorPulses/(speed/100*PULSE_PER_REVOLUTION/1000));
	float tf = CurrentTick() + (time * 1000);
	while(CurrentTick() < tf);
	
}

void TurnNinetyDegreesLeftPivoting(){
	Acquire(mc);
	OnFwdSync(OUT_BC, MotorB, 100);
	DifferentialDriveKinematic(90);
	Off(OUT_BC);
	Release(mc);

	Acquire(mc);
	OnRev(OUT_B, MotorB);
	OnFwd(OUT_C, MotorC);
	DifferentialDriveKinematic(90);
	Off(OUT_BC);
	Release(mc);

	Acquire(mc);
	OnRevSync(OUT_BC, MotorB,100);
	DifferentialDriveKinematic(90);
	Off(OUT_BC);
	Release(mc);

	Acquire(mc);
	OnRev(OUT_C, MotorC);
	OnFwd(OUT_B, MotorB);
	DifferentialDriveKinematic(90);
	Off(OUT_BC);
	Release(mc);
}

void TurnNinetyDegreesRightPivoting(){
	Acquire(mc);
	OnFwdSync(OUT_BC, MotorB,100);
	DifferentialDriveKinematic(90);
	Off(OUT_BC);
	Release(mc);

	Acquire(mc);
	OnRev(OUT_C, MotorC);
	OnFwd(OUT_B, MotorB);
	DifferentialDriveKinematic(90);
	Off(OUT_BC);
	Release(mc);

	Acquire(mc);
	OnRevSync(OUT_BC, MotorB,100);
	DifferentialDriveKinematic(90);
	Off(OUT_BC);
	Release(mc);

	Acquire(mc);
	OnRev(OUT_B, MotorB);
	OnFwd(OUT_C, MotorC);
	DifferentialDriveKinematic(90);
	Off(OUT_BC);
	Release(mc);
}

void Turn90Degrees(){
	Acquire(mc);
	OnFwdSync(OUT_BC, MotorB,100);
	DifferentialDriveKinematic(90);
	Off(OUT_BC);
	Release(mc);

	Acquire(mc);
	OnRev(OUT_C, MotorC);
	OnFwd(OUT_B, MotorB);
	DifferentialDriveKinematic(90);
	Off(OUT_BC);
	Release(mc);
}

task DeltaTime(){
	long lastTick = CurrentTick();
	while(true){
		long currentTick = CurrentTick();
        dt = (currentTick - lastTick) / 1000.0;
        lastTick = currentTick;
	}
}

//Thread para exibir valores no display(Debug)
task view_atributes(){
	while(true){
		TextOut(0,LCD_LINE1,"Sensor Ultrassonico:");
		NumOut(0,LCD_LINE2,SensorUS(IN_4));
		TextOut(0,LCD_LINE3,"Sensor de Luz:");
		NumOut(0, LCD_LINE4, SensorValue(IN_3));
		TextOut(0,LCD_LINE5,"Sensor de Toque:");
		NumOut(0,LCD_LINE6,SensorValue(IN_1));
		TextOut(0,LCD_LINE7,"Estado:");
		TextOut(0,LCD_LINE8,state);
		Wait(200);
		ClearScreen();
	}
}

//Thread para retirar e depositar o objeto quando reconhecido
task getObject(){
	while(true){
		if(state == "Warehouse"){
			if(SensorUS(IN_4) <= OBJECT && Getted == false && SensorValue(IN_3) == 0){
				Off(OUT_BC);
				RotateMotor(OUT_A, 10, -90);
				DifferentialDriveKinematic(90);
				RotateMotor(OUT_A, 10, 90);
				DifferentialDriveKinematic(90);
				Getted = true;
				Rotate = true;
				Off(OUT_A);
				localCounter = localCounter + 1;
				DifferentialDriveKinematic(90);
				if(localCounter > 8){
					localCounter = 0;
		    		}
		    		localMS();
			}
		}if(state == "Download"){
			Off(OUT_BC);
			RotateMotor(OUT_A, 10, -90);
			DifferentialDriveKinematic(90);
			Acquire(mc);
			OnFwdSync(OUT_BC, MotorB, 100);
			DifferentialDriveKinematic(90);
			Off(OUT_BC);
			Release(mc);
			RotateMotor(OUT_A, 30, 90);
            DifferentialDriveKinematic(90);
			Off(OUT_A);
			localCounter = localCounter + 1;
			DifferentialDriveKinematic(90);
			if(localCounter > 8){
                		localCounter = 0;
            		}
            		localMS();
        	}
        	if(state == "Recharge"){
        		Getted = false;
        		Rotate = false;
        	}
	}
}

//Thread para desviar de obstaculos
task avoid_wall(){
	while(true){
		if(SensorUS(IN_4) < WALL &&  SensorValue(IN_1) == 1){
			Off(OUT_BC);
			Acquire(mc);
			OnFwdSync(OUT_BC, MotorB, 100);
			DifferentialDriveKinematic(90);
            Off(OUT_BC);
			Release(mc);

			Acquire(mc);
			OnRev(OUT_C, MotorC);
			OnFwd(OUT_B, MotorB);
			DifferentialDriveKinematic(90);
            Off(OUT_BC);
			Release(mc);
		}else{
			if(Rotate == true){
				Rotate = false;
				Acquire(mc);
   				OnRev(OUT_B, MotorB);
				OnFwd(OUT_C, MotorC);
				DifferentialDriveKinematic(90);
                Off(OUT_BC);
				Release(mc);
				
				
			}
			Acquire(mc);
			OnRevSync(OUT_BC, MotorB, 100);
			Release(mc);
		
		}
	}
}

//Thread para detectar as fitas coloridas
task line_detect(){
	while(true){
		if(SensorValue(IN_3) <= BLACK){
			if(state == "Recharge" || state == "Warehouse" || state == "ExitWarehouse" || state == "Housing"){
				TurnNinetyDegreesLeftPivoting();
			}
			if(state == "Stock" || state == "SearchBase" || state == "SearchRecharge"){
				Turn90Degrees();
			}if(state == "ExitHousing"){
				Acquire(mc);
				OnFwdSync(OUT_BC, MotorB, 100);
				DifferentialDriveKinematic(90);
                Off(OUT_BC);
			  	
				OnRev(OUT_B, MotorB);
				OnFwd(OUT_C, MotorC);
				DifferentialDriveKinematic(90);
                Off(OUT_BC);
				Release(mc);
				

					
			}
		}if(SensorValue(IN_3) > SILVER){
			localCounter = localCounter + 1;
			DifferentialDriveKinematic(90);
			if(localCounter > 8){
                		localCounter = 0;
            		}
            		localMS();
		}if(SensorValue(IN_3) > REDMIN && SensorValue(IN_3) < REDMAX){
            		if(state == "Stock" || state == "SearchBase"){
			    	TurnNinetyDegreesRightPivoting();
            		}
            		if(state == "Housing"){
            			Turn90Degrees();
            		}
		}
				
	}
}

//Main  
task main(){
	SetSensorLight(IN_3);
	SetSensorUltrasonic(IN_4);
	SetSensorTouch(IN_1);
	Precedes(getObject,line_detect,avoid_wall,view_atributes,DeltaTime);
}
